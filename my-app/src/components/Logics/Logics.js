export const Location_stats = (stats) => {
    //Сохраняю параметры локации
    locations[`i${stats[0]}`] = {};
    locations[`i${stats[0]}`].bul = stats[1];
    locations[`i${stats[0]}`].gun = stats[1];
    locations[`i${stats[0]}`].fire = stats[2][0];
    locations[`i${stats[0]}`].el = stats[2][1];
    locations[`i${stats[0]}`].chem = stats[2][2];
    locations[`i${stats[0]}`].exp = stats[2][3];
    locations[`i${stats[0]}`].tear = stats[3][0];
    locations[`i${stats[0]}`].hit = stats[3][1];
    locations[`i${stats[0]}`].rad = stats[4];
}
export let locations = {}
export let player = {
    /*
    Объект для хранения параметров игрока
    Он хоть и объявляется без свойств и с одной функцией,
    но при вызове эта функция создаст  57 свойств
    Это сделано лишь потому, что если бы я объявил объект с 57 свойствами равными 0,
    то это выглядело бы уродливо
    */
set_null: () => {  
    player.gun = 0;
    ['fire', 'el', 'hit', 'tear', 'rad', 'chem', 'exp', 'bul'].map((param) => {
        ['', 'suit_', 'art1_', 'art2_', 'art3_', 'art4_', 'art5_'].map((part) => player[`${part}${param}`] = 0)
    })
}
};
export const Player_stats = (item, stats, gun_id) => {
    //Принимает параметры предмета и присваивает их тем параметрам игрока, которые отвечают за этот предмет
    if (item == 'gun') {
        player.gun = stats[stats.length - 1];
        player.gun_id = gun_id;
    } else if (item == 'suit') {
        [['fire', 0], ['el', 1], ['hit', 2], ['tear', 3], ['rad', 4], ['chem', 5], ['exp', 6], ['bul', 7]].map((param) => {
            player[`suit_${param[0]}`] = +(stats[param[1]]).match(/\d*/)[0];
        });
    } else {
        [[2, 'hit'], [3, 'tear'], [4, 'bul'], [5, 'el'], [7, 'fire'], [8, 'chem'], [9, 'rad']].map((param) => {
            player[`${item}_${param[1]}`] = 0;
            return((stats[param[0]] == '')?0:(player[`${item}_${param[1]}`] = +(stats[param[0]]).match(/\d+/)[0]));
        })
    }
    /*
    Изначально параметры сохраняются в свойства объекта player, которые отвечают за этот предмет
    Но затем все свойства, получившие свои значения от предметов, складываеются
    (Имеется ввиду, что, например, параметры защиты от огня, полученные от костюма и от артефакта, суммируются,
    а не вообще все параметры)
    */
    ['fire', 'el', 'hit', 'tear', 'rad', 'chem', 'exp', 'bul'].map((param) => {
        ['suit_', 'art1_', 'art2_', 'art3_', 'art4_', 'art5_'].map((player[`${param}`]=0, (part) => player[`${param}`] += player[`${part}${param}`]))
    });
}

export const Compare = (player, location, bag, bagIndexFun) => {
    /*
    Подсчитывает проценты готовности к прохождению локации,
    и создает массив, на основе которого будуть написаны рекоммендации, касаемо того,
    какие параметры следует повысить
    */
    let index_bag;
    let need_bag;
    let ammo;
    let need = [];
    /*
    Подсчет готовности происходит так:
    - считаются баллы игрока и локации
    - количество баллов зависит от параметров локации и игрока
    - для подсчета баллов, значения всех параметров умножаютсяна свои множители, а затем складываются
    - множители необходимы, т.к. ценность 1% каждого параметра имеет разную ценность
    (например, нулевая защита от радиации или пуль причинит намного больше неудобств игроку,
    чем нулевая защита от хим. ожогов и огня, т.к. эти аномалии легко обойти,
    а вот столкновения с радиацией или солдатами избежать сложнее)
    - баллы игрока за определенный показатель не могут быть больше, чем этот же показатель у локации,
    т.к. если у локации 10% силы мутантов, например, то 100% защиты от них не будет играть особой роли,
    т.к. их попросту почти нет
    - затем баллы игрока делятся на баллы локации
    - результат умножается на 60, т.к. от снаряжения игрок может получить максимум 60% готовности,
    остальные 40% он получит от расходуемых предметов у себя в рюкзаке
    - далее вызывается функция для подсчета процентов, получаемых от содержимого сумки
    */
    let score = [['fire', 1], ['el', 1], ['hit', 2], ['tear', 4], ['rad', 7], ['chem', 1], ['exp', 3], ['bul', 4], ['gun', 4]];
    let location_score = score.reduce((accum, param) => {
        return (accum + location[param[0]]*param[1]);
    }, 0);
    let player_score = score.reduce((accum, param) => {
        if (player[param[0]] >= location[param[0]]) {
            return (accum + location[param[0]]*param[1]);
        }
        need[need.length] = [param[0], `${location[param[0]] - player[param[0]]}%`];
        return (accum + player[param[0]]*param[1]);
    }, 0);
    let ready = player_score/location_score*60;
    [ammo, index_bag, need_bag] = bagIndexFun(location_score, location.rad, bag[0][2], bag[1][2], bag[2][2], bag[3][2]);
    /*
    После подсчета процентов, получаемых от сумки и снаряжения, они складываются
    и умножаются на показатель боеприпасов
    Это делается лишь потому, что все расчеты исходят из того, что игрок не будет обыскивать убитых врагов,
    соответственно его припасы пополняться не смогут, а без боеприпасов делать тут нечего.
    Да, конечно, тут можно вспомнить некоторых спидранеров сталкера и сказать,
    что они проходят игру за 10 минут без единного выстрела,
    но тогда бы пришлось как-то учитывать индивидуальные навыки каждого игрока
    и на основании этого рассчитывать результаты, но это было бы очень сложно и для меня, пока, невозможно.
    Поэтому можно считать, что все расчеты предназначены для глупых ботов, которые никого не будут обыскивать
    и будут пользоваться лишь одним своим основным оружием.
    Так как целью написания этого сайта было изучение реакта, то его практическую бесполезность
    не стоит считать за недостаток.
    */
    ready = Math.ceil((ready + index_bag)*ammo);
    need_bag.map((param) => need.push(param));
    let print = [ready, need];
    return print;
}

export const Bag_index = ( difficulty, loc_rad, food, heal, rad, ammo) => {
    /*
    Подсчет процентов, получаемых от содержимого сумки и показателя боеприпасов
    
    Для расчета используются баллы по категориям предметов (food, heal, rad - радиация, ammo - боеприпасы)
    (*) о том, как получаются баллы предметов читать в компоненте Select_item.jsx
    Формулы следующие:
    - для боеприпасов:
    баллы боеприпасов делятся на баллы локации, деленные на 100
    один балл боеприпасов - 1 полный магазин патронов для выбранного оружия
    подрзумевается, что 1 магазин на каждые 100 баллов локации
    чем локакция сложнее и чем больше в ней противников, тем больше будет требоваться боеприпасов
    - для еды:
    баллые еды делятся на 6, каждый балл - это 10% насыщения от еды
    подразумевается, что за время прохождения локации игрок проголодается на 60%
    - для медикаментов:
    баллы медикаментов делятся на баллы локации, деленные на 15
    один балл равен 5% восстановления здоровья
    подразумевается, что на каждые 100 баллов локации требуется около 60% восстановления (это одна базовая аптечка)
    - для противорадиационных препаратов:
    баллы препаратов делятся на значение радиации локации, деленное на 20
    подразумевается, что каждые 20% параметров радиации локации требуют 100% вывода радиации
    1 шприц дает 100% вывода, он же считается как 1 балл
    */
    let ammo_index = ammo != 0 ? ammo/(difficulty/100) >= 1 ? 
    [1, ''] : 
    [ammo/(difficulty/100), `Боеприпасы на ${Math.ceil(difficulty/100 - ammo)} ед. пачек`] : [0, `Боеприпасы на ${Math.ceil(difficulty/100)} ед. пачек`];
    let food_index = food/6 >= 1 ? 
    [1, ''] : 
    [food/6, `Еду на ${(6-food)*10}% насыщения`];
    let heal_index = heal/(difficulty/15) > 1 ? 
    [1, ''] : 
    [heal/(difficulty/15), `Медикаменты на ${Math.ceil((difficulty/15-heal)*5)}% восстановления`];
    let rad_index = loc_rad == 0 ? [1, ''] : rad/(loc_rad/2) > 1 ? 
    [1, ''] : 
    [rad/(loc_rad/20), `Препараты для вывода радиации на ${((loc_rad/20)-rad)*100}%`];
    /*
    После подсчета показателей всех предметов, показатели насыщения, восстановления и вывода радиации
    умножаются на 5, 25 и 15 соответственно.
    Это делается потому, что эти показатели имеют разную ценность
    Если выбирать между рюкзаками, груженными колбасой и аптечками,
    то любой игрок выберет аптечки, т.к. пользы от них больше,
    поэтому еда максимум может дать 5% готовности, а аптечки способны обеспечить четверть успеха - 25%
    */
    let index = [ammo_index[0], food_index[0]*5 + heal_index[0]*25 + rad_index[0]*10, 
    [['bag', ammo_index[1]], ['bag', food_index[1]], ['bag', heal_index[1]], ['bag',rad_index[1]]]];
    return index;
}   